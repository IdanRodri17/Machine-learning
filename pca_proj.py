# -*- coding: utf-8 -*-
"""PCA PROJ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IeoFA88EerAsQy5pzVoDSFRjekVTONFH
"""

import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from google.colab import files
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

df = pd.read_csv('')

print(df.head())

# Assuming 'df' is your DataFrame with the required features
# Extract the relevant features
features = df[['jsc(µA/cm2)', 'VOC(mV)', 'FF', 'Rsh', 'Rs']].copy()

# Rename columns
features.rename(columns={
    'jsc(µA/cm2)': 'jsc',
    'VOC(mV)': 'Voc',
}, inplace=True)

# Standardize the data
scaler = StandardScaler()
standardized_data = scaler.fit_transform(features)

# Apply PCA
pca = PCA(n_components=3)
principal_components = pca.fit_transform(standardized_data)

# Explained variance
explained_variance = pca.explained_variance_ratio_
print("Explained Variance Ratio:", explained_variance)
eigenvalues = pca.explained_variance_
print("Eigenvalues:", eigenvalues)

# Create a DataFrame with the PCA results
pca_df = pd.DataFrame(
    principal_components,
    columns=['PC1', 'PC2', 'PC3']
)

# Display the first few rows of the PCA-transformed data
print(pca_df.head())

print(pca_df.head())
print(pca_df.describe())

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

categories = data['B.C.'].unique()
colors = plt.cm.get_cmap('tab10', len(categories))
category_colors = {cat: colors(i) for i, cat in enumerate(categories)}

# Scatter plot of the first 3 principal components
ax.scatter(pca_df['PC1'], pca_df['PC2'], pca_df['PC3'], c='blue', s=100, alpha=0.8)

# Add axis labels and title
ax.set_xlabel('Principal Component 1')
ax.set_ylabel('Principal Component 2')
ax.set_zlabel('Principal Component 3')
plt.title('3D Scatter Plot of the First 3 Principal Components')

# Set axis limits
ax.set_xlim(pca_df['PC1'].min() - 1, pca_df['PC1'].max() + 1)
ax.set_ylim(pca_df['PC2'].min() - 1, pca_df['PC2'].max() + 1)
ax.set_zlim(pca_df['PC3'].min() - 1, pca_df['PC3'].max() + 1)

# Save the plot as a file and display it
plt.savefig('PCA_3D_plot.png')
plt.show()